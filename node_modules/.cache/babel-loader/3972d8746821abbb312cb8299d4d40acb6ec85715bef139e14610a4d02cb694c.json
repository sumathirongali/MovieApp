{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nimport bcrypt from 'bcryptjs';\nexport default {\n  name: 'loginPageComp',\n  data() {\n    return {\n      email: '',\n      password: ''\n    };\n  },\n  methods: {\n    /*\r\n    async login() {\r\n        const existingUser = await fetch(`http://localhost:3000/users/?email=${this.email}`);\r\n        const existingUserData = await existingUser.json();\r\n        if (existingUserData.length > 0) {\r\n            let doesPasswordMatch = bcrypt.compareSync(this.password, existingUserData[0].password);\r\n            if (doesPasswordMatch) {\r\n                //localStorage.setItem(\"user-info\", JSON.stringify(existingUserData.data));\r\n                return this.$router.push({\r\n                    name: 'LandingPage'\r\n                })\r\n            } else {\r\n                alert('Incorrect password! retry');\r\n                this.password = '';\r\n            }\r\n        } else {\r\n            alert(\"User not found\");\r\n            this.email = '';\r\n            this.password = '';\r\n        }\r\n    },\r\n    */\n    async login() {\n      let existingUser = await axios.get(`http://localhost:3000/users/?email=${this.email}`);\n      if (existingUser.data.length > 0) {\n        let doesPasswordMatch = bcrypt.compareSync(this.password, existingUser.data[0].password);\n        if (doesPasswordMatch && existingUser.status == 200) {\n          localStorage.setItem(\"user-info\", JSON.stringify(existingUser.data[0].name));\n          localStorage.setItem(\"user-info-email\", JSON.stringify(existingUser.data[0].email));\n          return this.$router.push({\n            name: 'LandingPage'\n          });\n        } else {\n          alert('Incorrect password!. Retry!');\n          this.password = '';\n        }\n      } else {\n        alert(\"User not found\");\n        this.email = '';\n        this.password = '';\n      }\n    },\n    backToHomePage() {\n      return this.$router.push({\n        name: 'HomePage'\n      });\n    }\n  },\n  //     mounted(){\n  //     let user = localStorage.getItem('user-info');\n  //     if(user.substring(0,7) != '{\"name\"'){\n  //         return this.$router.push({\n  //             name: 'LandingPage'\n  //         });\n  //     }else{\n  //         return this.login()\n  //     }\n  // }\n  mounted() {\n    let user = localStorage.getItem('user-info');\n    if (user) {\n      return this.$router.push({\n        name: 'LandingPage'\n      });\n    }\n  }\n};","map":{"version":3,"mappings":";AAeA,OAAOA,KAAI,MAAO,OAAO;AACzB,OAAOC,MAAK,MAAO,UAAU;AAC7B,eAAe;EACXC,IAAI,EAAE,eAAe;EACrBC,IAAI,GAAG;IACH,OAAO;MACHC,KAAK,EAAE,EAAE;MACTC,QAAQ,EAAE;IACd;EACJ,CAAC;EACDC,OAAO,EAAE;IACL;;;;;;;;;;;;;;;;;;;;;;IAsBA,MAAMC,KAAK,GAAG;MACV,IAAIC,YAAW,GAAI,MAAMR,KAAK,CAACS,GAAG,CAAE,sCAAqC,IAAI,CAACL,KAAM,EAAC,CAAC;MACtF,IAAII,YAAY,CAACL,IAAI,CAACO,MAAK,GAAI,CAAC,EAAE;QAC9B,IAAIC,iBAAgB,GAAIV,MAAM,CAACW,WAAW,CAAC,IAAI,CAACP,QAAQ,EAAEG,YAAY,CAACL,IAAI,CAAC,CAAC,CAAC,CAACE,QAAQ,CAAC;QACxF,IAAIM,iBAAgB,IAAKH,YAAY,CAACK,MAAK,IAAK,GAAG,EAAE;UACjDC,YAAY,CAACC,OAAO,CAAC,WAAW,EAAEC,IAAI,CAACC,SAAS,CAACT,YAAY,CAACL,IAAI,CAAC,CAAC,CAAC,CAACD,IAAI,CAAC;UAC3EY,YAAY,CAACC,OAAO,CAAC,iBAAiB,EAAEC,IAAI,CAACC,SAAS,CAACT,YAAY,CAACL,IAAI,CAAC,CAAC,CAAC,CAACC,KAAK,CAAC,CAAC;UACnF,OAAO,IAAI,CAACc,OAAO,CAACC,IAAI,CAAC;YACrBjB,IAAI,EAAE;UACV,CAAC;QACL,OAAO;UACHkB,KAAK,CAAC,6BAA6B,CAAC;UACpC,IAAI,CAACf,QAAO,GAAI,EAAE;QACtB;MACJ,OAAO;QACHe,KAAK,CAAC,gBAAgB,CAAC;QACvB,IAAI,CAAChB,KAAI,GAAI,EAAE;QACf,IAAI,CAACC,QAAO,GAAI,EAAE;MACtB;IACJ,CAAC;IACDgB,cAAc,GAAG;MACb,OAAO,IAAI,CAACH,OAAO,CAACC,IAAI,CAAC;QACrBjB,IAAI,EAAE;MACV,CAAC;IACL;EACJ,CAAC;EACD;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACAoB,OAAO,GAAG;IACN,IAAIC,IAAG,GAAIT,YAAY,CAACU,OAAO,CAAC,WAAW,CAAC;IAC5C,IAAID,IAAI,EAAE;MACN,OAAO,IAAI,CAACL,OAAO,CAACC,IAAI,CAAC;QACrBjB,IAAI,EAAE;MACV,CAAC,CAAC;IACN;EACJ;AACJ","names":["axios","bcrypt","name","data","email","password","methods","login","existingUser","get","length","doesPasswordMatch","compareSync","status","localStorage","setItem","JSON","stringify","$router","push","alert","backToHomePage","mounted","user","getItem"],"sourceRoot":"","sources":["C:\\Workspace\\MovieApp\\src\\components\\LoginPage.vue"],"sourcesContent":["<template>\r\n    \r\n    <v-card-title class=\"text-xs-h6 text-md-h5 text-lg-h4\"><b>Login</b></v-card-title><br />\r\n    <v-responsive class=\"mx-auto\" max-width=\"344\">\r\n        <v-text-field type=\"email\" placeholder=\"Enter your email\" v-model=\"email\" />\r\n        <v-text-field type=\"password\" placeholder=\"Enter your password\" v-model=\"password\" />\r\n    </v-responsive>\r\n    <v-btn v-on:click=\"login()\" color=\"primary\" elevation=\"15\">Login</v-btn>\r\n    \r\n<footer>\r\n    <v-btn tile outlined color=\"success\" v-on:click=\"backToHomePage()\">Back to home page</v-btn>\r\n</footer>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\nimport bcrypt from 'bcryptjs';\r\nexport default {\r\n    name: 'loginPageComp',\r\n    data() {\r\n        return {\r\n            email: '',\r\n            password: ''\r\n        }\r\n    },\r\n    methods: {\r\n        /*\r\n        async login() {\r\n            const existingUser = await fetch(`http://localhost:3000/users/?email=${this.email}`);\r\n            const existingUserData = await existingUser.json();\r\n            if (existingUserData.length > 0) {\r\n                let doesPasswordMatch = bcrypt.compareSync(this.password, existingUserData[0].password);\r\n                if (doesPasswordMatch) {\r\n                    //localStorage.setItem(\"user-info\", JSON.stringify(existingUserData.data));\r\n                    return this.$router.push({\r\n                        name: 'LandingPage'\r\n                    })\r\n                } else {\r\n                    alert('Incorrect password! retry');\r\n                    this.password = '';\r\n                }\r\n            } else {\r\n                alert(\"User not found\");\r\n                this.email = '';\r\n                this.password = '';\r\n            }\r\n        },\r\n        */\r\n        async login() {\r\n            let existingUser = await axios.get(`http://localhost:3000/users/?email=${this.email}`);\r\n            if (existingUser.data.length > 0) {\r\n                let doesPasswordMatch = bcrypt.compareSync(this.password, existingUser.data[0].password);\r\n                if (doesPasswordMatch && existingUser.status == 200) {\r\n                    localStorage.setItem(\"user-info\", JSON.stringify(existingUser.data[0].name))\r\n                    localStorage.setItem(\"user-info-email\", JSON.stringify(existingUser.data[0].email));\r\n                    return this.$router.push({\r\n                        name: 'LandingPage'\r\n                    })\r\n                } else {\r\n                    alert('Incorrect password!. Retry!');\r\n                    this.password = '';\r\n                }\r\n            } else {\r\n                alert(\"User not found\");\r\n                this.email = '';\r\n                this.password = '';\r\n            }\r\n        },\r\n        backToHomePage() {\r\n            return this.$router.push({\r\n                name: 'HomePage'\r\n            })\r\n        }\r\n    },\r\n    //     mounted(){\r\n    //     let user = localStorage.getItem('user-info');\r\n    //     if(user.substring(0,7) != '{\"name\"'){\r\n    //         return this.$router.push({\r\n    //             name: 'LandingPage'\r\n    //         });\r\n    //     }else{\r\n    //         return this.login()\r\n    //     }\r\n    // }\r\n    mounted() {\r\n        let user = localStorage.getItem('user-info');\r\n        if (user) {\r\n            return this.$router.push({\r\n                name: 'LandingPage'\r\n            });\r\n        }\r\n    }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\nfooter {\r\n    position: fixed;\r\n    left: 0;\r\n    bottom: 0;\r\n    width: 100%;\r\n}\r\n</style>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}