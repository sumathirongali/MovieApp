{"ast":null,"code":"import { withDirectives as _withDirectives, resolveDirective as _resolveDirective, createVNode as _createVNode } from \"vue\";\n// Components\nimport { VExpansionPanelSymbol } from \"./VExpansionPanels.mjs\";\nimport { VIcon } from \"../VIcon/index.mjs\"; // Directives\nimport { Ripple } from \"../../directives/ripple/index.mjs\"; // Composables\nimport { IconValue } from \"../../composables/icons.mjs\";\nimport { useBackgroundColor } from \"../../composables/color.mjs\"; // Utilities\nimport { computed, inject } from 'vue';\nimport { defineComponent, propsFactory, useRender } from \"../../util/index.mjs\";\nexport const makeVExpansionPanelTitleProps = propsFactory({\n  color: String,\n  expandIcon: {\n    type: IconValue,\n    default: '$expand'\n  },\n  collapseIcon: {\n    type: IconValue,\n    default: '$collapse'\n  },\n  hideActions: Boolean,\n  ripple: {\n    type: [Boolean, Object],\n    default: false\n  },\n  readonly: Boolean\n}, 'v-expansion-panel-title');\nexport const VExpansionPanelTitle = defineComponent({\n  name: 'VExpansionPanelTitle',\n  directives: {\n    Ripple\n  },\n  props: {\n    ...makeVExpansionPanelTitleProps()\n  },\n  setup(props, _ref) {\n    let {\n      slots\n    } = _ref;\n    const expansionPanel = inject(VExpansionPanelSymbol);\n    if (!expansionPanel) throw new Error('[Vuetify] v-expansion-panel-title needs to be placed inside v-expansion-panel');\n    const {\n      backgroundColorClasses,\n      backgroundColorStyles\n    } = useBackgroundColor(props, 'color');\n    const slotProps = computed(() => ({\n      collapseIcon: props.collapseIcon,\n      disabled: expansionPanel.disabled.value,\n      expanded: expansionPanel.isSelected.value,\n      expandIcon: props.expandIcon,\n      readonly: props.readonly\n    }));\n    useRender(() => {\n      var _slots$default;\n      return _withDirectives(_createVNode(\"button\", {\n        \"class\": ['v-expansion-panel-title', {\n          'v-expansion-panel-title--active': expansionPanel.isSelected.value\n        }, backgroundColorClasses.value],\n        \"style\": backgroundColorStyles.value,\n        \"type\": \"button\",\n        \"tabindex\": expansionPanel.disabled.value ? -1 : undefined,\n        \"disabled\": expansionPanel.disabled.value,\n        \"aria-expanded\": expansionPanel.isSelected.value,\n        \"onClick\": !props.readonly ? expansionPanel.toggle : undefined\n      }, [_createVNode(\"span\", {\n        \"class\": \"v-expansion-panel-title__overlay\"\n      }, null), (_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots, slotProps.value), !props.hideActions && _createVNode(\"span\", {\n        \"class\": \"v-expansion-panel-title__icon\"\n      }, [slots.actions ? slots.actions(slotProps.value) : _createVNode(VIcon, {\n        \"icon\": expansionPanel.isSelected.value ? props.collapseIcon : props.expandIcon\n      }, null)])]), [[_resolveDirective(\"ripple\"), props.ripple]]);\n    });\n    return {};\n  }\n});","map":{"version":3,"mappings":";AAAA;AAAA,SACSA,qBAAqB;AAAA,SACrBC,KAAK,8BAEd;AAAA,SACSC,MAAM,6CAEf;AAAA,SACSC,SAAS;AAAA,SACTC,kBAAkB,uCAE3B;AACA,SAASC,QAAQ,EAAEC,MAAM,QAAQ,KAAK;AAAA,SAC7BC,eAAe,EAAEC,YAAY,EAAEC,SAAS;AAEjD,OAAO,MAAMC,6BAA6B,GAAGF,YAAY,CAAC;EACxDG,KAAK,EAAEC,MAAM;EACbC,UAAU,EAAE;IACVC,IAAI,EAAEX,SAAS;IACfY,OAAO,EAAE;EACX,CAAC;EACDC,YAAY,EAAE;IACZF,IAAI,EAAEX,SAAS;IACfY,OAAO,EAAE;EACX,CAAC;EACDE,WAAW,EAAEC,OAAO;EACpBC,MAAM,EAAE;IACNL,IAAI,EAAE,CAACI,OAAO,EAAEE,MAAM,CAAC;IACvBL,OAAO,EAAE;EACX,CAAC;EACDM,QAAQ,EAAEH;AACZ,CAAC,EAAE,yBAAyB,CAAC;AAE7B,OAAO,MAAMI,oBAAoB,GAAGf,eAAe,CAAC;EAClDgB,IAAI,EAAE,sBAAsB;EAE5BC,UAAU,EAAE;IAAEtB;EAAO,CAAC;EAEtBuB,KAAK,EAAE;IACL,GAAGf,6BAA6B;EAClC,CAAC;EAEDgB,KAAK,CAAED,KAAK,QAAa;IAAA,IAAX;MAAEE;IAAM,CAAC;IACrB,MAAMC,cAAc,GAAGtB,MAAM,CAACN,qBAAqB,CAAC;IAEpD,IAAI,CAAC4B,cAAc,EAAE,MAAM,IAAIC,KAAK,CAAC,+EAA+E,CAAC;IAErH,MAAM;MAAEC,sBAAsB;MAAEC;IAAsB,CAAC,GAAG3B,kBAAkB,CAACqB,KAAK,EAAE,OAAO,CAAC;IAE5F,MAAMO,SAAS,GAAG3B,QAAQ,CAAC,OAAO;MAChCW,YAAY,EAAES,KAAK,CAACT,YAAY;MAChCiB,QAAQ,EAAEL,cAAc,CAACK,QAAQ,CAACC,KAAK;MACvCC,QAAQ,EAAEP,cAAc,CAACQ,UAAU,CAACF,KAAK;MACzCrB,UAAU,EAAEY,KAAK,CAACZ,UAAU;MAC5BQ,QAAQ,EAAEI,KAAK,CAACJ;IAClB,CAAC,CAAC,CAAC;IAEHZ,SAAS,CAAC;MAAA;MAAA;QAAA,SAEC,CACL,yBAAyB,EACzB;UACE,iCAAiC,EAAEmB,cAAc,CAACQ,UAAU,CAACF;QAC/D,CAAC,EACDJ,sBAAsB,CAACI,KAAK,CAC7B;QAAA,SACOH,qBAAqB,CAACG,KAAK;QAAA,QAC9B,QAAQ;QAAA,YACFN,cAAc,CAACK,QAAQ,CAACC,KAAK,GAAG,CAAC,CAAC,GAAGG,SAAS;QAAA,YAC9CT,cAAc,CAACK,QAAQ,CAACC,KAAK;QAAA,iBACxBN,cAAc,CAACQ,UAAU,CAACF,KAAK;QAAA,WACrC,CAACT,KAAK,CAACJ,QAAQ,GAAGO,cAAc,CAACU,MAAM,GAAGD;MAAS;QAAA,SAGjD;MAAkC,4BAE5CV,KAAK,CAACZ,OAAO,qBAAbwB,yBAAK,EAAWP,SAAS,CAACE,KAAK,CAAC,EAEhC,CAACT,KAAK,CAACR,WAAW;QAAA,SACN;MAA+B,IAEvCU,KAAK,CAACa,OAAO,GAAGb,KAAK,CAACa,OAAO,CAACR,SAAS,CAACE,KAAK,CAAC;QAAA,QAC9BN,cAAc,CAACQ,UAAU,CAACF,KAAK,GAAGT,KAAK,CAACT,YAAY,GAAGS,KAAK,CAACZ;MAAU,QAAK,EAGjG,mCAbUY,KAAK,CAACN,MAAM;IAAA,CAe1B,CAAC;IAEF,OAAO,CAAC,CAAC;EACX;AACF,CAAC,CAAC","names":["VExpansionPanelSymbol","VIcon","Ripple","IconValue","useBackgroundColor","computed","inject","defineComponent","propsFactory","useRender","makeVExpansionPanelTitleProps","color","String","expandIcon","type","default","collapseIcon","hideActions","Boolean","ripple","Object","readonly","VExpansionPanelTitle","name","directives","props","setup","slots","expansionPanel","Error","backgroundColorClasses","backgroundColorStyles","slotProps","disabled","value","expanded","isSelected","undefined","toggle","_slots$default","actions"],"sources":["../../../src/components/VExpansionPanel/VExpansionPanelTitle.tsx"],"sourcesContent":["// Components\nimport { VExpansionPanelSymbol } from './VExpansionPanels'\nimport { VIcon } from '@/components/VIcon'\n\n// Directives\nimport { Ripple } from '@/directives/ripple'\n\n// Composables\nimport { IconValue } from '@/composables/icons'\nimport { useBackgroundColor } from '@/composables/color'\n\n// Utilities\nimport { computed, inject } from 'vue'\nimport { defineComponent, propsFactory, useRender } from '@/util'\n\nexport const makeVExpansionPanelTitleProps = propsFactory({\n  color: String,\n  expandIcon: {\n    type: IconValue,\n    default: '$expand',\n  },\n  collapseIcon: {\n    type: IconValue,\n    default: '$collapse',\n  },\n  hideActions: Boolean,\n  ripple: {\n    type: [Boolean, Object],\n    default: false,\n  },\n  readonly: Boolean,\n}, 'v-expansion-panel-title')\n\nexport const VExpansionPanelTitle = defineComponent({\n  name: 'VExpansionPanelTitle',\n\n  directives: { Ripple },\n\n  props: {\n    ...makeVExpansionPanelTitleProps(),\n  },\n\n  setup (props, { slots }) {\n    const expansionPanel = inject(VExpansionPanelSymbol)\n\n    if (!expansionPanel) throw new Error('[Vuetify] v-expansion-panel-title needs to be placed inside v-expansion-panel')\n\n    const { backgroundColorClasses, backgroundColorStyles } = useBackgroundColor(props, 'color')\n\n    const slotProps = computed(() => ({\n      collapseIcon: props.collapseIcon,\n      disabled: expansionPanel.disabled.value,\n      expanded: expansionPanel.isSelected.value,\n      expandIcon: props.expandIcon,\n      readonly: props.readonly,\n    }))\n\n    useRender(() => (\n      <button\n        class={[\n          'v-expansion-panel-title',\n          {\n            'v-expansion-panel-title--active': expansionPanel.isSelected.value,\n          },\n          backgroundColorClasses.value,\n        ]}\n        style={ backgroundColorStyles.value }\n        type=\"button\"\n        tabindex={ expansionPanel.disabled.value ? -1 : undefined }\n        disabled={ expansionPanel.disabled.value }\n        aria-expanded={ expansionPanel.isSelected.value }\n        onClick={ !props.readonly ? expansionPanel.toggle : undefined }\n        v-ripple={ props.ripple }\n      >\n        <span class=\"v-expansion-panel-title__overlay\" />\n\n        { slots.default?.(slotProps.value) }\n\n        { !props.hideActions && (\n          <span class=\"v-expansion-panel-title__icon\">\n            {\n              slots.actions ? slots.actions(slotProps.value)\n              : <VIcon icon={ expansionPanel.isSelected.value ? props.collapseIcon : props.expandIcon } />\n            }\n          </span>\n        ) }\n      </button>\n    ))\n\n    return {}\n  },\n})\n\nexport type VExpansionPanelTitle = InstanceType<typeof VExpansionPanelTitle>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}