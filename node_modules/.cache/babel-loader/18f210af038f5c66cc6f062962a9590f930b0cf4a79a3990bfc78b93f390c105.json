{"ast":null,"code":"import { createVNode as _createVNode } from \"vue\";\n// Styles\nimport \"./VColorPickerEdit.css\";\n\n// Components\nimport { VBtn } from \"../VBtn/index.mjs\"; // Utilities\nimport { computed } from 'vue';\nimport { defineComponent, useRender } from \"../../util/index.mjs\";\nimport { modes } from \"./util/index.mjs\"; // Types\nconst VColorPickerInput = _ref => {\n  let {\n    label,\n    ...rest\n  } = _ref;\n  return _createVNode(\"div\", {\n    \"class\": \"v-color-picker-edit__input\"\n  }, [_createVNode(\"input\", rest, null), _createVNode(\"span\", null, [label])]);\n};\nexport const VColorPickerEdit = defineComponent({\n  name: 'VColorPickerEdit',\n  props: {\n    color: Object,\n    disabled: Boolean,\n    mode: {\n      type: String,\n      default: 'rgba',\n      validator: v => Object.keys(modes).includes(v)\n    },\n    modes: {\n      type: Array,\n      default: () => Object.keys(modes),\n      validator: v => Array.isArray(v) && v.every(m => Object.keys(modes).includes(m))\n    }\n  },\n  emits: {\n    'update:color': color => true,\n    'update:mode': mode => true\n  },\n  setup(props, _ref2) {\n    let {\n      emit\n    } = _ref2;\n    const enabledModes = computed(() => {\n      return props.modes.map(key => ({\n        ...modes[key],\n        name: key\n      }));\n    });\n    const inputs = computed(() => {\n      var _mode$inputs;\n      const mode = enabledModes.value.find(m => m.name === props.mode);\n      if (!mode) return [];\n      const color = props.color ? mode.to(props.color) : {};\n      return (_mode$inputs = mode.inputs) == null ? void 0 : _mode$inputs.map(_ref3 => {\n        let {\n          getValue,\n          getColor,\n          ...inputProps\n        } = _ref3;\n        return {\n          ...mode.inputProps,\n          ...inputProps,\n          disabled: props.disabled,\n          value: getValue(color),\n          onChange: e => {\n            const target = e.target;\n            if (!target) return;\n            emit('update:color', mode.from(getColor(color, target.value)));\n          }\n        };\n      });\n    });\n    useRender(() => {\n      var _inputs$value;\n      return _createVNode(\"div\", {\n        \"class\": \"v-color-picker-edit\"\n      }, [(_inputs$value = inputs.value) == null ? void 0 : _inputs$value.map(props => _createVNode(VColorPickerInput, props, null)), enabledModes.value.length > 1 && _createVNode(VBtn, {\n        \"icon\": \"$unfold\",\n        \"size\": \"x-small\",\n        \"variant\": \"plain\",\n        \"onClick\": () => {\n          const mi = enabledModes.value.findIndex(m => m.name === props.mode);\n          emit('update:mode', enabledModes.value[(mi + 1) % enabledModes.value.length].name);\n        }\n      }, null)]);\n    });\n    return {};\n  }\n});","map":{"version":3,"mappings":"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","names":["VBtn","computed","defineComponent","useRender","modes","VColorPickerInput","_ref","label","rest","VColorPickerEdit","name","props","color","Object","disabled","Boolean","mode","type","String","default","validator","v","keys","includes","Array","isArray","every","m","emits","setup","emit","enabledModes","map","key","inputs","value","find","to","_mode$inputs","_ref3","getValue","getColor","inputProps","onChange","e","target","from","_inputs$value","length","mi","findIndex"],"sources":["../../../src/components/VColorPicker/VColorPickerEdit.tsx"],"sourcesContent":["// Styles\nimport './VColorPickerEdit.sass'\n\n// Components\nimport { VBtn } from '@/components/VBtn'\n\n// Utilities\nimport { computed } from 'vue'\nimport { defineComponent, useRender } from '@/util'\nimport { modes } from './util'\n\n// Types\nimport type { PropType } from 'vue'\nimport type { HSV } from '@/util/colorUtils'\n\nconst VColorPickerInput = ({ label, ...rest }: any) => {\n  return (\n    <div\n      class=\"v-color-picker-edit__input\"\n    >\n      <input {...rest} />\n      <span>{ label }</span>\n    </div>\n  )\n}\n\nexport const VColorPickerEdit = defineComponent({\n  name: 'VColorPickerEdit',\n\n  props: {\n    color: Object as PropType<HSV | null>,\n    disabled: Boolean,\n    mode: {\n      type: String,\n      default: 'rgba',\n      validator: (v: string) => Object.keys(modes).includes(v),\n    },\n    modes: {\n      type: Array as PropType<string[]>,\n      default: () => Object.keys(modes),\n      validator: (v: any) => Array.isArray(v) && v.every(m => Object.keys(modes).includes(m)),\n    },\n  },\n\n  emits: {\n    'update:color': (color: HSV) => true,\n    'update:mode': (mode: string) => true,\n  },\n\n  setup (props, { emit }) {\n    const enabledModes = computed(() => {\n      return props.modes.map(key => ({ ...modes[key], name: key }))\n    })\n\n    const inputs = computed(() => {\n      const mode = enabledModes.value.find(m => m.name === props.mode)\n\n      if (!mode) return []\n\n      const color = props.color ? mode.to(props.color) : {}\n\n      return mode.inputs?.map(({ getValue, getColor, ...inputProps }) => {\n        return {\n          ...mode.inputProps,\n          ...inputProps,\n          disabled: props.disabled,\n          value: getValue(color),\n          onChange: (e: InputEvent) => {\n            const target = e.target as HTMLInputElement | null\n\n            if (!target) return\n\n            emit('update:color', mode.from(getColor(color, target.value)))\n          },\n        }\n      })\n    })\n\n    useRender(() => (\n      <div\n        class=\"v-color-picker-edit\"\n      >\n        { inputs.value?.map(props => (\n          <VColorPickerInput {...props} />\n        )) }\n        { enabledModes.value.length > 1 && (\n          <VBtn\n            icon=\"$unfold\"\n            size=\"x-small\"\n            variant=\"plain\"\n            onClick={ () => {\n              const mi = enabledModes.value.findIndex(m => m.name === props.mode)\n\n              emit('update:mode', enabledModes.value[(mi + 1) % enabledModes.value.length].name)\n            } }\n          />\n        ) }\n      </div>\n    ))\n\n    return {}\n  },\n})\n\nexport type VColorPickerEdit = InstanceType<typeof VColorPickerEdit>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}