{"ast":null,"code":"import { withDirectives as _withDirectives, vShow as _vShow, createVNode as _createVNode } from \"vue\";\n// Components\nimport { VExpandTransition } from \"../transitions/index.mjs\";\nimport { VExpansionPanelSymbol } from \"./VExpansionPanels.mjs\"; // Composables\nimport { makeLazyProps, useLazy } from \"../../composables/lazy.mjs\"; // Utilities\nimport { defineComponent, useRender } from \"../../util/index.mjs\";\nimport { inject } from 'vue';\nexport const VExpansionPanelText = defineComponent({\n  name: 'VExpansionPanelText',\n  props: {\n    ...makeLazyProps()\n  },\n  setup(props, _ref) {\n    let {\n      slots\n    } = _ref;\n    const expansionPanel = inject(VExpansionPanelSymbol);\n    if (!expansionPanel) throw new Error('[Vuetify] v-expansion-panel-text needs to be placed inside v-expansion-panel');\n    const {\n      hasContent,\n      onAfterLeave\n    } = useLazy(props, expansionPanel.isSelected);\n    useRender(() => {\n      var _slots$default;\n      return _createVNode(VExpandTransition, {\n        \"onAfterLeave\": onAfterLeave\n      }, {\n        default: () => [_withDirectives(_createVNode(\"div\", {\n          \"class\": \"v-expansion-panel-text\"\n        }, [slots.default && hasContent.value && _createVNode(\"div\", {\n          \"class\": \"v-expansion-panel-text__wrapper\"\n        }, [(_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots)])]), [[_vShow, expansionPanel.isSelected.value]])]\n      });\n    });\n    return {};\n  }\n});","map":{"version":3,"mappings":";AAAA;AAAA,SACSA,iBAAiB;AAAA,SACjBC,qBAAqB,kCAE9B;AAAA,SACSC,aAAa,EAAEC,OAAO,sCAE/B;AAAA,SACSC,eAAe,EAAEC,SAAS;AACnC,SAASC,MAAM,QAAQ,KAAK;AAE5B,OAAO,MAAMC,mBAAmB,GAAGH,eAAe,CAAC;EACjDI,IAAI,EAAE,qBAAqB;EAE3BC,KAAK,EAAE;IACL,GAAGP,aAAa;EAClB,CAAC;EAEDQ,KAAK,CAAED,KAAK,QAAa;IAAA,IAAX;MAAEE;IAAM,CAAC;IACrB,MAAMC,cAAc,GAAGN,MAAM,CAACL,qBAAqB,CAAC;IAEpD,IAAI,CAACW,cAAc,EAAE,MAAM,IAAIC,KAAK,CAAC,8EAA8E,CAAC;IAEpH,MAAM;MAAEC,UAAU;MAAEC;IAAa,CAAC,GAAGZ,OAAO,CAACM,KAAK,EAAEG,cAAc,CAACI,UAAU,CAAC;IAE9EX,SAAS,CAAC;MAAA;MAAA;QAAA,gBAC0BU;MAAY;QAAAE;UAAA,SAEpC;QAAwB,IAG5BN,KAAK,CAACM,OAAO,IAAIH,UAAU,CAACI,KAAK;UAAA,SACtB;QAAiC,sBACxCP,KAAK,CAACM,OAAO,qBAAbE,yBAAK,CAAY,EAEtB,cANQP,cAAc,CAACI,UAAU,CAACE,KAAK;MAAA;IAAA,CAS7C,CAAC;IAEF,OAAO,CAAC,CAAC;EACX;AACF,CAAC,CAAC","names":["VExpandTransition","VExpansionPanelSymbol","makeLazyProps","useLazy","defineComponent","useRender","inject","VExpansionPanelText","name","props","setup","slots","expansionPanel","Error","hasContent","onAfterLeave","isSelected","default","value","_slots$default"],"sources":["../../../src/components/VExpansionPanel/VExpansionPanelText.tsx"],"sourcesContent":["// Components\nimport { VExpandTransition } from '@/components/transitions'\nimport { VExpansionPanelSymbol } from './VExpansionPanels'\n\n// Composables\nimport { makeLazyProps, useLazy } from '@/composables/lazy'\n\n// Utilities\nimport { defineComponent, useRender } from '@/util'\nimport { inject } from 'vue'\n\nexport const VExpansionPanelText = defineComponent({\n  name: 'VExpansionPanelText',\n\n  props: {\n    ...makeLazyProps(),\n  },\n\n  setup (props, { slots }) {\n    const expansionPanel = inject(VExpansionPanelSymbol)\n\n    if (!expansionPanel) throw new Error('[Vuetify] v-expansion-panel-text needs to be placed inside v-expansion-panel')\n\n    const { hasContent, onAfterLeave } = useLazy(props, expansionPanel.isSelected)\n\n    useRender(() => (\n      <VExpandTransition onAfterLeave={ onAfterLeave }>\n        <div\n          class=\"v-expansion-panel-text\"\n          v-show={ expansionPanel.isSelected.value }\n        >\n          { slots.default && hasContent.value && (\n            <div class=\"v-expansion-panel-text__wrapper\">\n              { slots.default?.() }\n            </div>\n          ) }\n        </div>\n      </VExpandTransition>\n    ))\n\n    return {}\n  },\n})\n\nexport type VExpansionPanelText = InstanceType<typeof VExpansionPanelText>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}