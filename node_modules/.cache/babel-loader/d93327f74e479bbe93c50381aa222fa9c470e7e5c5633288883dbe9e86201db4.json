{"ast":null,"code":"// Types\n\nfunction mounted(el, binding) {\n  const modifiers = binding.modifiers || {};\n  const value = binding.value;\n  const {\n    once,\n    immediate,\n    ...modifierKeys\n  } = modifiers;\n  const defaultValue = !Object.keys(modifierKeys).length;\n  const {\n    handler,\n    options\n  } = typeof value === 'object' ? value : {\n    handler: value,\n    options: {\n      attributes: (modifierKeys == null ? void 0 : modifierKeys.attr) ?? defaultValue,\n      characterData: (modifierKeys == null ? void 0 : modifierKeys.char) ?? defaultValue,\n      childList: (modifierKeys == null ? void 0 : modifierKeys.child) ?? defaultValue,\n      subtree: (modifierKeys == null ? void 0 : modifierKeys.sub) ?? defaultValue\n    }\n  };\n  const observer = new MutationObserver(function () {\n    let mutations = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let observer = arguments.length > 1 ? arguments[1] : undefined;\n    handler == null ? void 0 : handler(mutations, observer);\n    if (once) unmounted(el, binding);\n  });\n  if (immediate) handler == null ? void 0 : handler([], observer);\n  el._mutate = Object(el._mutate);\n  el._mutate[binding.instance.$.uid] = {\n    observer\n  };\n  observer.observe(el, options);\n}\nfunction unmounted(el, binding) {\n  var _el$_mutate;\n  if (!((_el$_mutate = el._mutate) != null && _el$_mutate[binding.instance.$.uid])) return;\n  el._mutate[binding.instance.$.uid].observer.disconnect();\n  delete el._mutate[binding.instance.$.uid];\n}\nexport const Mutate = {\n  mounted,\n  unmounted\n};\nexport default Mutate;","map":{"version":3,"mappings":"AAAA;;AASA,SAASA,OAAO,CAAEC,EAAe,EAAEC,OAAiC,EAAE;EACpE,MAAMC,SAAS,GAAGD,OAAO,CAACC,SAAS,IAAI,CAAC,CAAC;EACzC,MAAMC,KAAK,GAAGF,OAAO,CAACE,KAAK;EAC3B,MAAM;IAAEC,IAAI;IAAEC,SAAS;IAAE,GAAGC;EAAa,CAAC,GAAGJ,SAAS;EACtD,MAAMK,YAAY,GAAG,CAACC,MAAM,CAACC,IAAI,CAACH,YAAY,CAAC,CAACI,MAAM;EAEtD,MAAM;IAAEC,OAAO;IAAEC;EAAQ,CAAC,GAAG,OAAOT,KAAK,KAAK,QAAQ,GAClDA,KAAK,GACL;IACAQ,OAAO,EAAER,KAAK;IACdS,OAAO,EAAE;MACPC,UAAU,EAAE,aAAY,oBAAZP,YAAY,CAAEQ,IAAI,KAAIP,YAAY;MAC9CQ,aAAa,EAAE,aAAY,oBAAZT,YAAY,CAAEU,IAAI,KAAIT,YAAY;MACjDU,SAAS,EAAE,aAAY,oBAAZX,YAAY,CAAEY,KAAK,KAAIX,YAAY;MAC9CY,OAAO,EAAE,aAAY,oBAAZb,YAAY,CAAEc,GAAG,KAAIb;IAChC;EACF,CAAC;EAEH,MAAMc,QAAQ,GAAG,IAAIC,gBAAgB,CAAC,YAGjC;IAAA,IAFHC,SAA2B,uEAAG,EAAE;IAAA,IAChCF,QAA0B;IAE1BV,OAAO,oBAAPA,OAAO,CAAGY,SAAS,EAAEF,QAAQ,CAAC;IAE9B,IAAIjB,IAAI,EAAEoB,SAAS,CAACxB,EAAE,EAAEC,OAAO,CAAC;EAClC,CAAC,CAAC;EAEF,IAAII,SAAS,EAAEM,OAAO,oBAAPA,OAAO,CAAG,EAAE,EAAEU,QAAQ,CAAC;EAEtCrB,EAAE,CAACyB,OAAO,GAAGjB,MAAM,CAACR,EAAE,CAACyB,OAAO,CAAC;EAC/BzB,EAAE,CAACyB,OAAO,CAAExB,OAAO,CAACyB,QAAQ,CAAEC,CAAC,CAACC,GAAG,CAAC,GAAG;IAAEP;EAAS,CAAC;EAEnDA,QAAQ,CAACQ,OAAO,CAAC7B,EAAE,EAAEY,OAAO,CAAC;AAC/B;AAEA,SAASY,SAAS,CAAExB,EAAe,EAAEC,OAAiC,EAAE;EAAA;EACtE,IAAI,iBAACD,EAAE,CAACyB,OAAO,aAAVK,YAAa7B,OAAO,CAACyB,QAAQ,CAAEC,CAAC,CAACC,GAAG,CAAC,GAAE;EAE5C5B,EAAE,CAACyB,OAAO,CAACxB,OAAO,CAACyB,QAAQ,CAAEC,CAAC,CAACC,GAAG,CAAC,CAAEP,QAAQ,CAACU,UAAU,EAAE;EAC1D,OAAO/B,EAAE,CAACyB,OAAO,CAACxB,OAAO,CAACyB,QAAQ,CAAEC,CAAC,CAACC,GAAG,CAAC;AAC5C;AAEA,OAAO,MAAMI,MAAM,GAAG;EACpBjC,OAAO;EACPyB;AACF,CAAC;AAED,eAAeQ,MAAM","names":["mounted","el","binding","modifiers","value","once","immediate","modifierKeys","defaultValue","Object","keys","length","handler","options","attributes","attr","characterData","char","childList","child","subtree","sub","observer","MutationObserver","mutations","unmounted","_mutate","instance","$","uid","observe","_el$_mutate","disconnect","Mutate"],"sources":["../../../src/directives/mutate/index.ts"],"sourcesContent":["// Types\nimport type { DirectiveBinding } from 'vue'\nimport type { MutationOptions } from '@/composables/mutationObserver'\n\nexport interface MutationDirectiveBinding extends Omit<DirectiveBinding, 'modifiers' | 'value'> {\n  value: MutationCallback | { handler: MutationCallback, options?: MutationObserverInit }\n  modifiers: MutationOptions\n}\n\nfunction mounted (el: HTMLElement, binding: MutationDirectiveBinding) {\n  const modifiers = binding.modifiers || {}\n  const value = binding.value\n  const { once, immediate, ...modifierKeys } = modifiers\n  const defaultValue = !Object.keys(modifierKeys).length\n\n  const { handler, options } = typeof value === 'object'\n    ? value\n    : {\n      handler: value,\n      options: {\n        attributes: modifierKeys?.attr ?? defaultValue,\n        characterData: modifierKeys?.char ?? defaultValue,\n        childList: modifierKeys?.child ?? defaultValue,\n        subtree: modifierKeys?.sub ?? defaultValue,\n      },\n    }\n\n  const observer = new MutationObserver((\n    mutations: MutationRecord[] = [],\n    observer: MutationObserver\n  ) => {\n    handler?.(mutations, observer)\n\n    if (once) unmounted(el, binding)\n  })\n\n  if (immediate) handler?.([], observer)\n\n  el._mutate = Object(el._mutate)\n  el._mutate![binding.instance!.$.uid] = { observer }\n\n  observer.observe(el, options)\n}\n\nfunction unmounted (el: HTMLElement, binding: MutationDirectiveBinding) {\n  if (!el._mutate?.[binding.instance!.$.uid]) return\n\n  el._mutate[binding.instance!.$.uid]!.observer.disconnect()\n  delete el._mutate[binding.instance!.$.uid]\n}\n\nexport const Mutate = {\n  mounted,\n  unmounted,\n}\n\nexport default Mutate\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}