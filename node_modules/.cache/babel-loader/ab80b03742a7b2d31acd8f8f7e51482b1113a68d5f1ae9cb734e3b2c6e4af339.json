{"ast":null,"code":"import { resolveDirective as _resolveDirective, withDirectives as _withDirectives, vShow as _vShow, createVNode as _createVNode } from \"vue\";\n/* eslint-disable complexity */\n// Styles\nimport \"./VChip.css\";\n\n// Components\nimport { VAvatar } from \"../VAvatar/index.mjs\";\nimport { VChipGroupSymbol } from \"../VChipGroup/VChipGroup.mjs\";\nimport { VDefaultsProvider } from \"../VDefaultsProvider/index.mjs\";\nimport { VExpandXTransition } from \"../transitions/index.mjs\";\nimport { VIcon } from \"../VIcon/index.mjs\"; // Composables\nimport { genOverlays, makeVariantProps, useVariant } from \"../../composables/variant.mjs\";\nimport { makeBorderProps, useBorder } from \"../../composables/border.mjs\";\nimport { makeDensityProps, useDensity } from \"../../composables/density.mjs\";\nimport { makeElevationProps, useElevation } from \"../../composables/elevation.mjs\";\nimport { makeGroupItemProps, useGroupItem } from \"../../composables/group.mjs\";\nimport { makeRoundedProps, useRounded } from \"../../composables/rounded.mjs\";\nimport { makeRouterProps, useLink } from \"../../composables/router.mjs\";\nimport { makeSizeProps, useSize } from \"../../composables/size.mjs\";\nimport { makeTagProps } from \"../../composables/tag.mjs\";\nimport { makeThemeProps, provideTheme } from \"../../composables/theme.mjs\";\nimport { useProxiedModel } from \"../../composables/proxiedModel.mjs\";\nimport { IconValue } from \"../../composables/icons.mjs\"; // Directives\nimport { Ripple } from \"../../directives/ripple/index.mjs\"; // Utilities\nimport { defineComponent } from \"../../util/index.mjs\";\nimport { computed } from 'vue';\nexport const VChip = defineComponent({\n  name: 'VChip',\n  directives: {\n    Ripple\n  },\n  props: {\n    activeClass: String,\n    appendAvatar: String,\n    appendIcon: IconValue,\n    closable: Boolean,\n    closeIcon: {\n      type: IconValue,\n      default: '$delete'\n    },\n    closeLabel: {\n      type: String,\n      default: '$vuetify.close'\n    },\n    draggable: Boolean,\n    filter: Boolean,\n    filterIcon: {\n      type: String,\n      default: '$complete'\n    },\n    label: Boolean,\n    link: Boolean,\n    pill: Boolean,\n    prependAvatar: String,\n    prependIcon: IconValue,\n    ripple: {\n      type: Boolean,\n      default: true\n    },\n    text: String,\n    modelValue: {\n      type: Boolean,\n      default: true\n    },\n    ...makeBorderProps(),\n    ...makeDensityProps(),\n    ...makeElevationProps(),\n    ...makeGroupItemProps(),\n    ...makeRoundedProps(),\n    ...makeRouterProps(),\n    ...makeSizeProps(),\n    ...makeTagProps({\n      tag: 'span'\n    }),\n    ...makeThemeProps(),\n    ...makeVariantProps({\n      variant: 'tonal'\n    })\n  },\n  emits: {\n    'click:close': e => true,\n    'update:modelValue': value => true,\n    'group:selected': val => true,\n    click: e => true\n  },\n  setup(props, _ref) {\n    let {\n      attrs,\n      emit,\n      slots\n    } = _ref;\n    const {\n      borderClasses\n    } = useBorder(props);\n    const {\n      colorClasses,\n      colorStyles,\n      variantClasses\n    } = useVariant(props);\n    const {\n      densityClasses\n    } = useDensity(props);\n    const {\n      elevationClasses\n    } = useElevation(props);\n    const {\n      roundedClasses\n    } = useRounded(props);\n    const {\n      sizeClasses\n    } = useSize(props);\n    const {\n      themeClasses\n    } = provideTheme(props);\n    const isActive = useProxiedModel(props, 'modelValue');\n    const group = useGroupItem(props, VChipGroupSymbol, false);\n    const link = useLink(props, attrs);\n    const isClickable = computed(() => !props.disabled && (!!group || link.isClickable.value || props.link));\n    function onCloseClick(e) {\n      isActive.value = false;\n      emit('click:close', e);\n    }\n    function onClick(e) {\n      var _link$navigate;\n      emit('click', e);\n      if (!isClickable.value) return;\n      (_link$navigate = link.navigate) == null ? void 0 : _link$navigate.call(link, e);\n      group == null ? void 0 : group.toggle();\n    }\n    return () => {\n      var _slots$default;\n      const Tag = link.isLink.value ? 'a' : props.tag;\n      const hasAppend = !!(slots.append || props.appendIcon || props.appendAvatar);\n      const hasClose = !!(slots.close || props.closable);\n      const hasFilter = !!(slots.filter || props.filter) && group;\n      const hasPrepend = !!(slots.prepend || props.prependIcon || props.prependAvatar);\n      const hasColor = !group || group.isSelected.value;\n      return isActive.value && _withDirectives(_createVNode(Tag, {\n        \"class\": ['v-chip', {\n          'v-chip--disabled': props.disabled,\n          'v-chip--label': props.label,\n          'v-chip--link': isClickable.value,\n          'v-chip--filter': hasFilter,\n          'v-chip--pill': props.pill\n        }, themeClasses.value, borderClasses.value, hasColor ? colorClasses.value : undefined, densityClasses.value, elevationClasses.value, roundedClasses.value, sizeClasses.value, variantClasses.value, group == null ? void 0 : group.selectedClass.value],\n        \"style\": [hasColor ? colorStyles.value : undefined],\n        \"disabled\": props.disabled || undefined,\n        \"draggable\": props.draggable,\n        \"href\": link.href.value,\n        \"onClick\": onClick\n      }, {\n        default: () => [genOverlays(isClickable.value, 'v-chip'), hasFilter && _createVNode(VDefaultsProvider, {\n          \"key\": \"filter\",\n          \"defaults\": {\n            VIcon: {\n              icon: props.filterIcon\n            }\n          }\n        }, {\n          default: () => [_createVNode(VExpandXTransition, null, {\n            default: () => [_withDirectives(_createVNode(\"div\", {\n              \"class\": \"v-chip__filter\"\n            }, [slots.filter ? slots.filter() : _createVNode(VIcon, null, null)]), [[_vShow, group.isSelected.value]])]\n          })]\n        }), hasPrepend && _createVNode(VDefaultsProvider, {\n          \"key\": \"prepend\",\n          \"defaults\": {\n            VAvatar: {\n              image: props.prependAvatar\n            },\n            VIcon: {\n              icon: props.prependIcon\n            }\n          }\n        }, {\n          default: () => [slots.prepend ? _createVNode(\"div\", {\n            \"class\": \"v-chip__prepend\"\n          }, [slots.prepend()]) : props.prependAvatar ? _createVNode(VAvatar, {\n            \"start\": true\n          }, null) : props.prependIcon ? _createVNode(VIcon, {\n            \"start\": true\n          }, null) : undefined]\n        }), ((_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots, {\n          isSelected: group == null ? void 0 : group.isSelected.value,\n          selectedClass: group == null ? void 0 : group.selectedClass.value,\n          select: group == null ? void 0 : group.select,\n          toggle: group == null ? void 0 : group.toggle,\n          value: group == null ? void 0 : group.value.value,\n          disabled: props.disabled\n        })) ?? props.text, hasAppend && _createVNode(VDefaultsProvider, {\n          \"key\": \"append\",\n          \"defaults\": {\n            VAvatar: {\n              image: props.appendAvatar\n            },\n            VIcon: {\n              icon: props.appendIcon\n            }\n          }\n        }, {\n          default: () => [slots.append ? _createVNode(\"div\", {\n            \"class\": \"v-chip__append\"\n          }, [slots.append()]) : props.appendAvatar ? _createVNode(VAvatar, {\n            \"end\": true\n          }, null) : props.appendIcon ? _createVNode(VIcon, {\n            \"end\": true\n          }, null) : undefined]\n        }), hasClose && _createVNode(VDefaultsProvider, {\n          \"key\": \"close\",\n          \"defaults\": {\n            VIcon: {\n              icon: props.closeIcon,\n              size: 'x-small'\n            }\n          }\n        }, {\n          default: () => [_createVNode(\"div\", {\n            \"class\": \"v-chip__close\",\n            \"onClick\": onCloseClick\n          }, [slots.close ? slots.close() : _createVNode(VIcon, null, null)])]\n        })]\n      }), [[_resolveDirective(\"ripple\"), isClickable.value && props.ripple, null]]);\n    };\n  }\n});","map":{"version":3,"mappings":"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","names":["VAvatar","VChipGroupSymbol","VDefaultsProvider","VExpandXTransition","VIcon","genOverlays","makeVariantProps","useVariant","makeBorderProps","useBorder","makeDensityProps","useDensity","makeElevationProps","useElevation","makeGroupItemProps","useGroupItem","makeRoundedProps","useRounded","makeRouterProps","useLink","makeSizeProps","useSize","makeTagProps","makeThemeProps","provideTheme","useProxiedModel","IconValue","Ripple","defineComponent","computed","VChip","name","directives","props","activeClass","String","appendAvatar","appendIcon","closable","Boolean","closeIcon","type","default","closeLabel","draggable","filter","filterIcon","label","link","pill","prependAvatar","prependIcon","ripple","text","modelValue","tag","variant","emits","e","value","val","click","setup","attrs","emit","slots","borderClasses","colorClasses","colorStyles","variantClasses","densityClasses","elevationClasses","roundedClasses","sizeClasses","themeClasses","isActive","group","isClickable","disabled","onCloseClick","onClick","navigate","_link$navigate","toggle","Tag","isLink","hasAppend","append","hasClose","close","hasFilter","hasPrepend","prepend","hasColor","isSelected","undefined","selectedClass","href","icon","image","_slots$default","select","size"],"sources":["../../../src/components/VChip/VChip.tsx"],"sourcesContent":["/* eslint-disable complexity */\n// Styles\nimport './VChip.sass'\n\n// Components\nimport { VAvatar } from '@/components/VAvatar'\nimport { VChipGroupSymbol } from '@/components/VChipGroup/VChipGroup'\nimport { VDefaultsProvider } from '@/components/VDefaultsProvider'\nimport { VExpandXTransition } from '@/components/transitions'\nimport { VIcon } from '@/components/VIcon'\n\n// Composables\nimport { genOverlays, makeVariantProps, useVariant } from '@/composables/variant'\nimport { makeBorderProps, useBorder } from '@/composables/border'\nimport { makeDensityProps, useDensity } from '@/composables/density'\nimport { makeElevationProps, useElevation } from '@/composables/elevation'\nimport { makeGroupItemProps, useGroupItem } from '@/composables/group'\nimport { makeRoundedProps, useRounded } from '@/composables/rounded'\nimport { makeRouterProps, useLink } from '@/composables/router'\nimport { makeSizeProps, useSize } from '@/composables/size'\nimport { makeTagProps } from '@/composables/tag'\nimport { makeThemeProps, provideTheme } from '@/composables/theme'\nimport { useProxiedModel } from '@/composables/proxiedModel'\nimport { IconValue } from '@/composables/icons'\n\n// Directives\nimport { Ripple } from '@/directives/ripple'\n\n// Utilities\nimport { defineComponent } from '@/util'\nimport { computed } from 'vue'\n\nexport const VChip = defineComponent({\n  name: 'VChip',\n\n  directives: { Ripple },\n\n  props: {\n    activeClass: String,\n    appendAvatar: String,\n    appendIcon: IconValue,\n    closable: Boolean,\n    closeIcon: {\n      type: IconValue,\n      default: '$delete',\n    },\n    closeLabel: {\n      type: String,\n      default: '$vuetify.close',\n    },\n    draggable: Boolean,\n    filter: Boolean,\n    filterIcon: {\n      type: String,\n      default: '$complete',\n    },\n    label: Boolean,\n    link: Boolean,\n    pill: Boolean,\n    prependAvatar: String,\n    prependIcon: IconValue,\n    ripple: {\n      type: Boolean,\n      default: true,\n    },\n    text: String,\n    modelValue: {\n      type: Boolean,\n      default: true,\n    },\n\n    ...makeBorderProps(),\n    ...makeDensityProps(),\n    ...makeElevationProps(),\n    ...makeGroupItemProps(),\n    ...makeRoundedProps(),\n    ...makeRouterProps(),\n    ...makeSizeProps(),\n    ...makeTagProps({ tag: 'span' }),\n    ...makeThemeProps(),\n    ...makeVariantProps({ variant: 'tonal' } as const),\n  },\n\n  emits: {\n    'click:close': (e: Event) => true,\n    'update:modelValue': (value: boolean) => true,\n    'group:selected': (val: { value: boolean }) => true,\n    click: (e: MouseEvent | KeyboardEvent) => true,\n  },\n\n  setup (props, { attrs, emit, slots }) {\n    const { borderClasses } = useBorder(props)\n    const { colorClasses, colorStyles, variantClasses } = useVariant(props)\n    const { densityClasses } = useDensity(props)\n    const { elevationClasses } = useElevation(props)\n    const { roundedClasses } = useRounded(props)\n    const { sizeClasses } = useSize(props)\n    const { themeClasses } = provideTheme(props)\n\n    const isActive = useProxiedModel(props, 'modelValue')\n    const group = useGroupItem(props, VChipGroupSymbol, false)\n    const link = useLink(props, attrs)\n    const isClickable = computed(() => !props.disabled && (!!group || link.isClickable.value || props.link))\n\n    function onCloseClick (e: Event) {\n      isActive.value = false\n\n      emit('click:close', e)\n    }\n\n    function onClick (e: MouseEvent) {\n      emit('click', e)\n\n      if (!isClickable.value) return\n\n      link.navigate?.(e)\n      group?.toggle()\n    }\n\n    return () => {\n      const Tag = (link.isLink.value) ? 'a' : props.tag\n      const hasAppend = !!(slots.append || props.appendIcon || props.appendAvatar)\n      const hasClose = !!(slots.close || props.closable)\n      const hasFilter = !!(slots.filter || props.filter) && group\n      const hasPrepend = !!(slots.prepend || props.prependIcon || props.prependAvatar)\n      const hasColor = !group || group.isSelected.value\n\n      return isActive.value && (\n        <Tag\n          class={[\n            'v-chip',\n            {\n              'v-chip--disabled': props.disabled,\n              'v-chip--label': props.label,\n              'v-chip--link': isClickable.value,\n              'v-chip--filter': hasFilter,\n              'v-chip--pill': props.pill,\n            },\n            themeClasses.value,\n            borderClasses.value,\n            hasColor ? colorClasses.value : undefined,\n            densityClasses.value,\n            elevationClasses.value,\n            roundedClasses.value,\n            sizeClasses.value,\n            variantClasses.value,\n            group?.selectedClass.value,\n          ]}\n          style={[\n            hasColor ? colorStyles.value : undefined,\n          ]}\n          disabled={ props.disabled || undefined }\n          draggable={ props.draggable }\n          href={ link.href.value }\n          v-ripple={ [isClickable.value && props.ripple, null] }\n          onClick={ onClick }\n        >\n          { genOverlays(isClickable.value, 'v-chip') }\n\n          { hasFilter && (\n            <VDefaultsProvider\n              key=\"filter\"\n              defaults={{\n                VIcon: { icon: props.filterIcon },\n              }}\n            >\n              <VExpandXTransition>\n                <div\n                  class=\"v-chip__filter\"\n                  v-show={ group.isSelected.value }\n                >\n                  { slots.filter ? slots.filter() : (<VIcon />) }\n                </div>\n              </VExpandXTransition>\n            </VDefaultsProvider>\n          ) }\n\n          { hasPrepend && (\n            <VDefaultsProvider\n              key=\"prepend\"\n              defaults={{\n                VAvatar: {\n                  image: props.prependAvatar,\n                },\n                VIcon: {\n                  icon: props.prependIcon,\n                },\n              }}\n            >\n              { slots.prepend\n                ? (\n                  <div class=\"v-chip__prepend\">\n                    { slots.prepend() }\n                  </div>\n                )\n                : props.prependAvatar ? (<VAvatar start />)\n                : props.prependIcon ? (<VIcon start />)\n                : undefined\n              }\n            </VDefaultsProvider>\n          ) }\n\n          { slots.default?.({\n            isSelected: group?.isSelected.value,\n            selectedClass: group?.selectedClass.value,\n            select: group?.select,\n            toggle: group?.toggle,\n            value: group?.value.value,\n            disabled: props.disabled,\n          }) ?? props.text }\n\n          { hasAppend && (\n            <VDefaultsProvider\n              key=\"append\"\n              defaults={{\n                VAvatar: {\n                  image: props.appendAvatar,\n                },\n                VIcon: {\n                  icon: props.appendIcon,\n                },\n              }}\n            >\n              { slots.append\n                ? (\n                  <div class=\"v-chip__append\">\n                    { slots.append() }\n                  </div>\n                )\n                : props.appendAvatar ? (<VAvatar end />)\n                : props.appendIcon ? (<VIcon end />)\n                : undefined\n              }\n            </VDefaultsProvider>\n          ) }\n\n          { hasClose && (\n            <VDefaultsProvider\n              key=\"close\"\n              defaults={{\n                VIcon: {\n                  icon: props.closeIcon,\n                  size: 'x-small',\n                },\n              }}\n            >\n              <div\n                class=\"v-chip__close\"\n                onClick={ onCloseClick }\n              >\n                { slots.close ? slots.close() : (<VIcon />) }\n              </div>\n            </VDefaultsProvider>\n          ) }\n        </Tag>\n      )\n    }\n  },\n})\n\nexport type VChip = InstanceType<typeof VChip>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}