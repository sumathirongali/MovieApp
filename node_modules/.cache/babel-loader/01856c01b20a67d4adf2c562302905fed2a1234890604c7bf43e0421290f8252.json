{"ast":null,"code":"function mounted(el, binding) {\n  var _binding$modifiers, _binding$modifiers2;\n  const handler = binding.value;\n  const options = {\n    passive: !((_binding$modifiers = binding.modifiers) != null && _binding$modifiers.active)\n  };\n  window.addEventListener('resize', handler, options);\n  el._onResize = Object(el._onResize);\n  el._onResize[binding.instance.$.uid] = {\n    handler,\n    options\n  };\n  if (!((_binding$modifiers2 = binding.modifiers) != null && _binding$modifiers2.quiet)) {\n    handler();\n  }\n}\nfunction unmounted(el, binding) {\n  var _el$_onResize;\n  if (!((_el$_onResize = el._onResize) != null && _el$_onResize[binding.instance.$.uid])) return;\n  const {\n    handler,\n    options\n  } = el._onResize[binding.instance.$.uid];\n  window.removeEventListener('resize', handler, options);\n  delete el._onResize[binding.instance.$.uid];\n}\nexport const Resize = {\n  mounted,\n  unmounted\n};\nexport default Resize;","map":{"version":3,"mappings":"AAUA,SAASA,OAAO,CAAEC,EAAe,EAAEC,OAA+B,EAAE;EAAA;EAClE,MAAMC,OAAO,GAAGD,OAAO,CAACE,KAAK;EAC7B,MAAMC,OAAgC,GAAG;IACvCC,OAAO,EAAE,wBAACJ,OAAO,CAACK,SAAS,aAAjBC,mBAAmBC,MAAM;EACrC,CAAC;EAEDC,MAAM,CAACC,gBAAgB,CAAC,QAAQ,EAAER,OAAO,EAAEE,OAAO,CAAC;EAEnDJ,EAAE,CAACW,SAAS,GAAGC,MAAM,CAACZ,EAAE,CAACW,SAAS,CAAC;EACnCX,EAAE,CAACW,SAAS,CAAEV,OAAO,CAACY,QAAQ,CAAEC,CAAC,CAACC,GAAG,CAAC,GAAG;IACvCb,OAAO;IACPE;EACF,CAAC;EAED,IAAI,yBAACH,OAAO,CAACK,SAAS,aAAjBU,oBAAmBC,KAAK,GAAE;IAC7Bf,OAAO,EAAE;EACX;AACF;AAEA,SAASgB,SAAS,CAAElB,EAAe,EAAEC,OAA+B,EAAE;EAAA;EACpE,IAAI,mBAACD,EAAE,CAACW,SAAS,aAAZQ,cAAelB,OAAO,CAACY,QAAQ,CAAEC,CAAC,CAACC,GAAG,CAAC,GAAE;EAE9C,MAAM;IAAEb,OAAO;IAAEE;EAAQ,CAAC,GAAGJ,EAAE,CAACW,SAAS,CAACV,OAAO,CAACY,QAAQ,CAAEC,CAAC,CAACC,GAAG,CAAE;EAEnEN,MAAM,CAACW,mBAAmB,CAAC,QAAQ,EAAElB,OAAO,EAAEE,OAAO,CAAC;EAEtD,OAAOJ,EAAE,CAACW,SAAS,CAACV,OAAO,CAACY,QAAQ,CAAEC,CAAC,CAACC,GAAG,CAAC;AAC9C;AAEA,OAAO,MAAMM,MAAM,GAAG;EACpBtB,OAAO;EACPmB;AACF,CAAC;AAED,eAAeG,MAAM","names":["mounted","el","binding","handler","value","options","passive","modifiers","_binding$modifiers","active","window","addEventListener","_onResize","Object","instance","$","uid","_binding$modifiers2","quiet","unmounted","_el$_onResize","removeEventListener","Resize"],"sources":["../../../src/directives/resize/index.ts"],"sourcesContent":["import type { DirectiveBinding } from 'vue'\n\ninterface ResizeDirectiveBinding extends Omit<DirectiveBinding, 'modifiers'> {\n  value: () => void\n  modifiers?: {\n    active?: boolean\n    quiet?: boolean\n  }\n}\n\nfunction mounted (el: HTMLElement, binding: ResizeDirectiveBinding) {\n  const handler = binding.value\n  const options: AddEventListenerOptions = {\n    passive: !binding.modifiers?.active,\n  }\n\n  window.addEventListener('resize', handler, options)\n\n  el._onResize = Object(el._onResize)\n  el._onResize![binding.instance!.$.uid] = {\n    handler,\n    options,\n  }\n\n  if (!binding.modifiers?.quiet) {\n    handler()\n  }\n}\n\nfunction unmounted (el: HTMLElement, binding: ResizeDirectiveBinding) {\n  if (!el._onResize?.[binding.instance!.$.uid]) return\n\n  const { handler, options } = el._onResize[binding.instance!.$.uid]!\n\n  window.removeEventListener('resize', handler, options)\n\n  delete el._onResize[binding.instance!.$.uid]\n}\n\nexport const Resize = {\n  mounted,\n  unmounted,\n}\n\nexport default Resize\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}